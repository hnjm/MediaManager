// <auto-generated />
using System;
using MediaManager.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MediaManager.API.Migrations
{
    [DbContext(typeof(MediaManagerContext))]
    partial class MediaManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediaManager.API.Data.Entities.FileEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("FileEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "All of my love.mp3"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rock and Roll All Nite.mp3"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Beat Box Extreme.mp3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lady in Red.mp3"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Back in the Saddle.mp3"
                        });
                });

            modelBuilder.Entity("MediaManager.API.Data.Entities.M3uFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalMegaBytes")
                        .HasColumnType("integer");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VolumeId");

                    b.ToTable("M3uFiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTimeOffset(new DateTime(2023, 5, 12, 17, 30, 26, 840, DateTimeKind.Unspecified).AddTicks(1067), new TimeSpan(0, -4, 0, 0, 0)),
                            Title = "ShaNaNa.m3u",
                            TotalMegaBytes = 42,
                            VolumeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTimeOffset(new DateTime(2023, 5, 12, 17, 30, 26, 840, DateTimeKind.Unspecified).AddTicks(1088), new TimeSpan(0, -4, 0, 0, 0)),
                            Title = "WakeAndBake.m3u",
                            TotalMegaBytes = 42,
                            VolumeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTimeOffset(new DateTime(2023, 5, 12, 17, 30, 26, 840, DateTimeKind.Unspecified).AddTicks(1091), new TimeSpan(0, -4, 0, 0, 0)),
                            Title = "BravenHearts.m3u",
                            TotalMegaBytes = 42,
                            VolumeId = 2
                        });
                });

            modelBuilder.Entity("MediaManager.API.Data.Entities.M3uFileEntry", b =>
                {
                    b.Property<int>("FileEntryId")
                        .HasColumnType("integer");

                    b.Property<int>("M3uFileId")
                        .HasColumnType("integer");

                    b.HasKey("FileEntryId", "M3uFileId");

                    b.HasIndex("M3uFileId");

                    b.ToTable("M3uFileEntry");
                });

            modelBuilder.Entity("MediaManager.API.Data.Entities.Volume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Moniker")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Volumes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTimeOffset(new DateTime(2023, 5, 12, 17, 30, 26, 838, DateTimeKind.Unspecified).AddTicks(7856), new TimeSpan(0, -4, 0, 0, 0)),
                            Moniker = "kgon-01",
                            Title = "KGON-01"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTimeOffset(new DateTime(2023, 5, 12, 17, 30, 26, 838, DateTimeKind.Unspecified).AddTicks(7897), new TimeSpan(0, -4, 0, 0, 0)),
                            Moniker = "mellow-01",
                            Title = "Mellow-01"
                        });
                });

            modelBuilder.Entity("MediaManager.API.Data.Entities.M3uFile", b =>
                {
                    b.HasOne("MediaManager.API.Data.Entities.Volume", "Volume")
                        .WithMany("M3uFiles")
                        .HasForeignKey("VolumeId");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("MediaManager.API.Data.Entities.M3uFileEntry", b =>
                {
                    b.HasOne("MediaManager.API.Data.Entities.FileEntry", null)
                        .WithMany()
                        .HasForeignKey("FileEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaManager.API.Data.Entities.M3uFile", null)
                        .WithMany()
                        .HasForeignKey("M3uFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaManager.API.Data.Entities.Volume", b =>
                {
                    b.Navigation("M3uFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
